module List

import Prelude((&), (-), (+), Tuple, Unit,
    split, get, size, empty, insert, compose)

enum List a = Empty | Element a (List a)

join s Empty = ""
join s (Element e es) = e & s & join s es

map f Empty = Empty
map f (Element e es) = Element (f e) (map f es)

length (Element _ es) = 1 + length es
length Empty = 0

append Empty xs = xs
append (Element e es) xs = Element e (append es xs)

filter _ Empty = Empty
filter p (Element e es) =
    if p e then Element e (filter p es) else filter p es

foldr _ z Empty = z
foldr f z (Element x xs) = f x (foldr f z xs)

foldl f z Empty = z
foldl f z (Element x xs) = foldl f (f z x) xs

foldMap f = foldl (fun z e -> append z (f e)) Empty

listToArray = foldl insert (empty Unit)

nth 1 (Element e _) = e
nth n (Element _ es) = nth (n - 1) es 

# Splits
split sep text =
    let {
        splitted = Prelude.split sep text
            } in case size splitted of {
                0 -> Empty
                2 -> Element (get 1 splitted) (split sep (get 2 splitted))
                    }

words = split "%s+"

lines = split newline

newline = "
"
