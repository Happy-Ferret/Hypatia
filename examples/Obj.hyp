module Obj

import Prelude((&), notEq, toNumber, file, getn, error,
    Numeral, compose, arrayFoldMap, arrayMap)
import Geometry(Vector, Vec4)
import Array(filter, inspect, split, map, foldMap, lines, words, Array)


alias V = Vector Native.Numeral

enum VertexIndex
    = VI Numeral
    | VTI Numeral Numeral
    | VNI Numeral Numeral
    | VTNI Numeral Numeral Numeral

enum ObjElement
    = Vertex V
    | TextureCoordinate V
    | Normal V
    | Face (Array VertexIndex)
    | Comment

toFace (Face f) = [f]
toFace _ = []

toVertex (Vertex v) = [v]
toVertex _ = []

toNormal (Normal n) = [n]
toNormal _ = []

getFaces = foldMap toFace
getVertices = foldMap toVertex
getNormals = foldMap toNormal

filteredWords s = filter (notEq "") (words s)

load filePath = map (compose matchLine filteredWords) (lines (file filePath))

matchLine [] = Comment
matchLine es =
    case getn 1 es of
        "v" -> Vertex (readVector es)
        "vn" -> Normal (readVector es)
        "vt" -> TextureCoordinate (readVector es)
        "f" -> Face (map readVI (filter (notEq "f") es))
        _ -> Comment

readVector [_, v1, v2, v3, v4] =
    Vec4 (toNumber v1) (toNumber v2) (toNumber v3) (toNumber v4)
readVector [_, v1, v2, v3] =
    Vec4 (toNumber v1) (toNumber v2) (toNumber v3) 1
readVector [_, v1, v2] =
    Vec4 (toNumber v1) (toNumber v2) 0 1
readVector [_, v1] =
    Vec4 (toNumber v1) 0 0 1

readVI s = case split "/" s of
    [vi] -> VI (toNumber vi)
    [vi, vt] -> VTI (toNumber vi) (toNumber vt)
    [vi, "", vn] -> VNI (toNumber vi) (toNumber vn)
    [vi, vt, vn] -> VTNI (toNumber vi) (toNumber vt) (toNumber vn)
